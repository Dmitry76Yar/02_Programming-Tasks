	package f05_ACMP_150_199;
/*Субботник	(Время: 1 сек. Память: 16 Мб Сложность: 44%)
	В этом году Иван Иванович решил отметить приход осени субботником, чтобы убрать весь мусор во дворе дома номер 31 по улице
Осенней. На субботник он пригласил N знакомых старушек, живущих в том же самом доме. Однако, в самом начале мероприятия выяснилось,
что по одиночке старушки работают плохо, так как им хочется во время работы еще и поговорить друг с другом.
	Иван Иванович подумал и принял волевое решение разбить старушек на группы так, чтобы в каждой группе было не менее 2 старушек.
Старушки отличаются друг от друга уровнем разговорчивости, и если в одну группу попадут две старушки, у одной из которых маленький 
уровень разговорчивости, а у второй - большой, то они не могут поговорить друг с другом и работа будет стопориться.
	Назовем разговорчивостью группы разность между максимальным и минимальным уровнями разговорчивости старушек в группе.
Например, если уровни разговорчивости старушек в группе равны 7, 3 и 11, то разговорчивость группы равна 11 - 3 = 8.
Разговорчивостью разбиения старушек на группы назовем максимальную из разговорчивостей групп, входящих в разбиение.
	Требуется написать программу, которая поможет Ивану Ивановичу найти разбиение старушек на группы, разговорчивость которого
минимальна.
	Входные данные
Входной файл INPUT.TXT содержит в первой строке число N (2 ≤ N ≤ 1000) – количество старушек. Во второй строке записано N чисел
от 1 до 109 – разговорчивости старушек.
	Выходные данные
Выходной текстовый файл OUTPUT.TXT должен содержать одно целое число, равное минимально возможной разговорчивости разбиения
старушек на группы.
	Примеры
№	INPUT.TXT	OUTPUT.TXT
1	2
1 1000000000						999999999
2	3
	1 2 3							2
3	8
	1 10 100 1000 1000 100 10 1		0*/

import java.util.*;
import java.io.*;

public class acmp_0186_short{
public static void main(String[] args) throws IOException {
	Scanner sc = new Scanner(new FileReader("C:\\JavaTXT\\ACMP_0001\\input.txt"));
	int N = sc.nextInt();
	int a[] = new int[N] ;
    for (int i =0; i<N; i++) a[i] = sc.nextInt();
    Arrays.sort(a);
    
    int b[] = new int[N];
    int w = 0;
    b[0] = 0;
    b[1] = a[1] - a[0];
    if (N==2) w = b[1];
    else {
	    b[2] = a[2] - a[0];
	    for (int i=3; i<N; i++) {
	    	int t = Math.max(a[i] - a[i-1], b[i-2]);
	    	int r = Math.max(a[i] - a[i-1], b[i-1]);
	    	if (t<r) b[i] = t;
	    	else b[i] = r;
	    }
	    w = b[N-1];
    }
    PrintWriter o = new PrintWriter(new FileWriter("C:\\JavaTXT\\ACMP_0001\\output.txt"));
    o.print(w);
    o.close();
    }
}