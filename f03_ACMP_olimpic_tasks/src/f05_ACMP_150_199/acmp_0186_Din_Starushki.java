	package f05_ACMP_150_199;
/*Субботник	(Время: 1 сек. Память: 16 Мб Сложность: 44%)
	В этом году Иван Иванович решил отметить приход осени субботником, чтобы убрать весь мусор во дворе дома номер 31 по улице
Осенней. На субботник он пригласил N знакомых старушек, живущих в том же самом доме. Однако, в самом начале мероприятия выяснилось,
что по одиночке старушки работают плохо, так как им хочется во время работы еще и поговорить друг с другом.
	Иван Иванович подумал и принял волевое решение разбить старушек на группы так, чтобы в каждой группе было не менее 2 старушек.
Старушки отличаются друг от друга уровнем разговорчивости, и если в одну группу попадут две старушки, у одной из которых маленький 
уровень разговорчивости, а у второй - большой, то они не могут поговорить друг с другом и работа будет стопориться.
	Назовем разговорчивостью группы разность между максимальным и минимальным уровнями разговорчивости старушек в группе.
Например, если уровни разговорчивости старушек в группе равны 7, 3 и 11, то разговорчивость группы равна 11 - 3 = 8.
Разговорчивостью разбиения старушек на группы назовем максимальную из разговорчивостей групп, входящих в разбиение.
	Требуется написать программу, которая поможет Ивану Ивановичу найти разбиение старушек на группы, разговорчивость которого
минимальна.
	Входные данные
Входной файл INPUT.TXT содержит в первой строке число N (2 ≤ N ≤ 1000) – количество старушек. Во второй строке записано N чисел
от 1 до 109 – разговорчивости старушек.
	Выходные данные
Выходной текстовый файл OUTPUT.TXT должен содержать одно целое число, равное минимально возможной разговорчивости разбиения
старушек на группы.
	Примеры
№	INPUT.TXT	OUTPUT.TXT
1	2
1 1000000000						999999999
2	3
	1 2 3							2
3	8
	1 10 100 1000 1000 100 10 1		0*/

import java.util.*;
import java.io.*;

public class acmp_0186_Din_Starushki{
public static void main(String[] args) throws IOException {
	Scanner sc = new Scanner(new FileReader("C:\\JavaTXT\\ACMP_0001\\input.txt"));
	int N = sc.nextInt();
	int array[] = new int[N] ;
    for (int i =0; i<N; i++) array[i] = sc.nextInt();
    Arrays.sort(array);
    System.out.println(Arrays.toString(array));
    
    int result[] = new int[N];
    int res = 0;
    	// Первые 3 результаты вносим в result[] с расчетом вручную, т.к. в любом случае 1 связана со 2, и 1 связана с 3-ей
    result[0] = 0;
    result[1] = array[1] - array[0];
    if (N==2) res = result[1];
    else {
	    result[2] = array[2] - array[0];
	    System.out.println(Arrays.toString(result));		
	    
	    // На примере [156, 244, 258, 390, 458, 680, 694, 740, 817, 844]
	    // Далее начиная с 4-го элемента (390) начинаем расчитывать следующим образом
	    // Считаем, что на данном этапе мы связываем 390 с 258, т.к. 390 последний элемент и он должен быть связан с предпоследним
	    // Могут быть 2 варианта :    расмотрим на примере элемента 458
	    // 1-ый вариант - предпоследний элемент связан с пред_пред_последним, то есть 258 - 390 - 458 связаны
	    // В этом случае расчет делается как максим. значение из (458 - 390) и (result[] для элемента 390)
	    // 2-ой вариант - предпоследний элеменет не связан с пред_пред_последним, то есть разрыв 458 - 390  и 258-..
	    // В этом случае расчет делается как максим. значение из (458 - 390) и (result[] для элемента 258)
	    
	    for (int i=3; i<N; i++) {
	    	System.out.print(" i = " + i + "   array[i] = " + array[i]);
	    		// С разрывом   Для 390 будет: 390-258=132  и 244-156 = 88
	    		//				Для 458 будет: 458 - 390 = 68  и 258-156 = 102
	    		//    			Для 680 будет: 680 - 458 = 222 и 390-258 = 132
	    	int temp1 = array[i] - array[i-1];
	    	System.out.print("\t temp1 = " + temp1 + "\tresult[i-2] = " + result[i-2]);
	    	temp1 = Math.max(temp1, result[i-2]);
	    	
	    		// Без разрыва  Для 390 будет: 390-156=234
	    		// Для 458 будет: 458 - 258 = 200
	    		// Для 680 будет: max(680-390 = 290, 258-156=102)
//	    	int temp2 = array[i] - array[i-1] + result[i-1];
	    	int temp2 = array[i] - array[i-1];
	    	temp2 = Math.max(temp2, result[i-1]);
	    	
	    		// Итого   Для 390  делаем разрыв на 258
	    		//		   Для 458  делаем разрыв на 390
	    	    //		   Для 680  делаем разрыв на 390
	    	System.out.print("\t temp1 = " + temp1 + "  temp2 = " + temp2);
	    	if (temp1<temp2) {
	//    		System.out.print("\tРазрыв");
	    		result[i] = temp1;
	    	}
	    	else {
	//    		System.out.print("\tБез разрыва");
	    		result[i] = temp2;
	    	}
	    	System.out.println("\t" + Arrays.toString(result));
	    }
	    res = result[N-1];
    }
    System.out.println("res = " + res);
	    
    PrintWriter o = new PrintWriter(new FileWriter("C:\\JavaTXT\\ACMP_0001\\output.txt"));
    o.print(res);
    o.flush();
    o.close();
    }
}