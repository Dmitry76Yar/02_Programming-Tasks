package f03_ACMP_51_100;
	/*	Треугольные страны		(Время: 1 сек. Память: 16 Мб Сложность: 37%)
Эта история происходила на одной плоской планете. С незапамятных времен на ней существовал город N, находящийся в точке xn,yn. Кроме этого,
в разное время на этой же планете существовали страны, каждая из которых имела форму треугольника.
	Теперь перед историками встала серьезная задача — по имеющимся у них данным о треугольных странах определить, в какие страны мог 
входить город N. Город мог входить в страну, если он находится строго внутри нее.
	Входные данные
Первая строка входного файла содержит два числа: xn и yn — координаты города N. Вторая строка входного файла содержит количество k 
треугольных стран (1 ≤ k ≤ 1000). Последующие k строк каждая описывают одну треугольную страну. Описание треугольной страны состоит из 
шести целых чисел x1,y1,x2,y2,x3,y3, где (x1,y1), (x2,y2), (x3,y3) — координаты вершин этой страны.
	Гарантируется, что все страны имеют ненулевую площадь. Все координаты не превосходят 10000 по абсолютной величине.
	Выходные данные
В первой строке выходного файла выведите количество стран, в которые мог входить город N. Во второй строке выведите через пробел номера
этих стран в возрастающем порядке. Страны нумеруются с единицы в том порядке, в каком они заданы во входном файле.
	Примеры
№	INPUT.TXT			OUTPUT.TXT
1	0 1
	2
	-2 0 2 0 0 2
	-3 0 3 0 0 3			2
							1 2
2	0 2
	2
	-2 0 2 0 0 2
	-3 0 3 0 0 3			1		
							2. */	

import java.io.*;
import java.util.Scanner;

public class acmp_0090_Geom_Traingle  {
	
	/* https://cpp.mazurok.com/triangle
	Все точки треугольника (и любого выпуклого многоугольника) должны лежать по одну сторону от прямой, проходящей через каждую его сторону.
	Запишем уравнение прямой, проходящей, например, через точки  A и B. Получим (x-xa)*(yb-ya) - (y-ya)*(xb-xa)  = 0 
	Уравнение я записал в такой форме, чтобы не приходилось выполнять деление и переживать о нуле в знаменателе.
	Теперь для любой точки  мы можем вычислить левую часть приведенного равенства. Для точек, лежащих на прямой мы должны получать ноль. 
	В тоже время прямая разобьёт плоскость на две полуплоскости. Точки лежащие в одной полуплоскости будут давать положительные значения. 
	А точки из другой полуплоскости — отрицательные.
	Мы готовы проверить первое условие — принадлежит ли точка  той же полуплоскости, что и точка  относительно прямой ? 
	Для этого подставим обе точки в левую часть приведенного выше уравнения прямой и убедимся, что получены значения одного и того же знака.
	А если одна из точек даст точно ноль? Это означает, что точка лежит на прямой. По условию задачи это может быть только точка . 
	Тогда она принадлежит треугольнику независимо от знака выражения, вычисленного для точки .
	*/
	
public static void main(String[] args) throws IOException {
	Scanner sc;
	sc = new Scanner(new FileReader("C:\\JavaTXT\\ACMP_0001\\input.txt"));
	int x0 = sc.nextInt();
	int y0 = sc.nextInt();
	int N = sc.nextInt();
	System.out.println("x0 = " + x0 + ", y0 = " + y0 + " ,  N = " + N);
	StringBuffer sbf = new StringBuffer();
	int countAllCountries = 0;
	int countProperCountries = 0;
	
	while (sc.hasNextInt()) {
		int xa = sc.nextInt();
		int ya = sc.nextInt();
		int xb = sc.nextInt();
		int yb = sc.nextInt();
		int xc = sc.nextInt();
		int yc = sc.nextInt();
		countAllCountries++;
		
			/* Расчет значения 
		Если все три значения одинакового знака, то точка внутри треугольника, если значение равно нулю, значит точка лежит на стороне треугольника
		В ином случае (если значения различные по знаку) , точка вне треугольник  */
		
		int a = (x0 - xa)*(yb- ya) - (y0 - ya)*(xb-xa);
		int b = (x0 - xb)*(yc- yb) - (y0 - yb)*(xc-xb);
		int c = (x0 - xc)*(ya- yc) - (y0 - yc)*(xa-xc);
		System.out.println("a = " + a + ", b = " + b + ", c = " + c);	
		if ((a<0)&&(b<0)&&(c<0)) {
			countProperCountries++;
			sbf.append(countAllCountries).append(" "); 
		}
		else if ((a>0)&&(b>0)&&(c>0)) {
			countProperCountries++;
			sbf.append(countAllCountries).append(" "); 
		}
	}
	System.out.println(countProperCountries);
	System.out.println(sbf.toString());
			
	PrintWriter out = new PrintWriter(new FileWriter("C:\\JavaTXT\\ACMP_0001\\output.txt"));
    out.println(countProperCountries);
    out.println(sbf.toString());
    out.flush();
    out.close();
}
}
